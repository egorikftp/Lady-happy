apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

def versionProp = loadProperties('version.properties')
def version = versionProp['VERSION'] as int
def sub_version = versionProp['SUB_VERSION'] as int
def build_version = versionProp['BUILD_VERSION'] as int
def verCode = version * 100000 + sub_version * 1000 + build_version
def verName = "$version.$sub_version.$build_version"

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.egoriku.ladyhappy"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode verCode
        versionName verName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs "en", "ru"
    }

    signingConfigs {
        release {
            storeFile file("${rootProject.projectDir}\\keystore\\lady_happy_key_store.jks")
            storePassword System.getenv('KEY_STORE_PASSWORD')
            keyAlias System.getenv('KEY_ALIAS')
            keyPassword System.getenv('KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            debuggable false
            multiDexEnabled false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles 'proguard-rules.pro', getDefaultProguardFile('proguard-android-optimize.txt')
        }

        debug {
            multiDexEnabled true
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleDebug) || taskGraph.hasTask(assembleRelease)) {
            autoIncrementBuildVersionNumber()
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${"Lady Happy"}.${variant.name}_${variant.versionName}.apk"
        }
    }

    lintOptions {
        abortOnError false
    }
}

//apply plugin: 'com.getkeepsafe.dexcount'

dependencies {
    implementation project(':core')
    implementation project(':featureProvider')
    implementation project(':landing')
    implementation project(':launchScreen')
    implementation project(':mainScreen')
    implementation project(':photoReport')
    implementation project(':settings')

    implementation('com.crashlytics.sdk.android:crashlytics:2.10.0@aar') {
        transitive = true
    }

    implementation 'androidx.appcompat:appcompat:1.0.2'

    implementation 'com.google.firebase:firebase-core:16.0.9'
    implementation 'com.google.firebase:firebase-firestore:19.0.0'

    implementation 'ru.terrakok.cicerone:cicerone:5.0.0'

    implementation Libs.kotlin_stdlib

    implementation 'com.google.dagger:dagger:2.22.1'
    kapt 'com.google.dagger:dagger-compiler:2.22.1'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'

    testImplementation 'junit:junit:4.12'
}

apply plugin: 'com.google.gms.google-services'

Properties loadProperties(String path) {
    def file = file(path)
    if (file.canRead() && file.canWrite()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(file))
        return properties
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

def autoIncrementBuildVersionNumber() {
    def prop = loadProperties('version.properties')
    def newVersion = (prop['BUILD_VERSION'] as int) + 1
    prop['BUILD_VERSION'] = newVersion as String
    prop.store(file('version.properties').newWriter(), null)
}